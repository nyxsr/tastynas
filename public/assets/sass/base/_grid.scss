/* -------------------------------------------
    Grid
---------------------------------------------- */
.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -#{get(base, _gutter-md)};
    margin-right: -#{get(base, _gutter-md)};
    
    > * {
        position: relative;
        width: 100%;
        padding-right: #{get(base, _gutter-md)};
        padding-left: #{get(base, _gutter-md)};
    }    
}
.gutter-lg {
    margin-left: -#{get(base, _gutter-lg)};
    margin-right: -#{get(base, _gutter-lg)};
    > * {
        padding-right: #{get(base, _gutter-lg)};
        padding-left: #{get(base, _gutter-lg)};
    }
}
.gutter-sm {
    margin-left: -#{get(base, _gutter-sm)};
    margin-right: -#{get(base, _gutter-sm)};
    > * {
        padding-right: #{get(base, _gutter-sm)};
        padding-left: #{get(base, _gutter-sm)};
    }
}
.gutter-xs {
    margin-left: -#{get(base, _gutter-xs)};
    margin-right: -#{get(base, _gutter-xs)};
    > * {
        padding-right: #{get(base, _gutter-xs)};
        padding-left: #{get(base, _gutter-xs)};
    }
}
.gutter-no {
    margin-left: 0;
    margin-right: 0;
    > * {
        padding-right: 0;
        padding-left: 0;
    }
}

[class*="cols-"] > * {
    flex: 0 0 auto;
}
@for $i from 1 through 8 {
    .cols-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
}

@include mq(xs) {
    @for $i from 1 through 8 {
        .cols-xs-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

@include mq(sm) {
    @for $i from 1 through 8 {
        .cols-sm-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

@include mq(md) {
    @for $i from 1 through 8 {
        .cols-md-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

@include mq(lg) {
    @for $i from 1 through 8 {
        .cols-lg-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

@include mq(xl) {
    @for $i from 1 through 8 {
        .cols-xl-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

@include mq(xxl) {
    @for $i from 1 through 8 {
        .cols-xxl-#{$i} > * { width: #{ round( 100% / $i * 10000 ) / 10000 };  }
    }
}

[class*="col-"] {
    flex: 0 0 auto;
}
@for $i from 1 through 12 {
    .col-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
}

@include mq(xs) {
    @for $i from 1 through 12 {
        .col-xs-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
    }
}

@include mq(sm) {
    @for $i from 1 through 12 {
        .col-sm-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
    }
}

@include mq(md) {
    @for $i from 1 through 12 {
        .col-md-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
    }
}

@include mq(lg) {
    @for $i from 1 through 12 {
        .col-lg-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
    }
}

@include mq(xl) {
    @for $i from 1 through 12 {
        .col-xl-#{$i} { width: #{ round(100% / 12 * $i * 10000) / 10000 }; }
    }
}

@include mq(xxl) {
    .col-xxl-3 {
        width: 25%;
    }
    .col-xxl-9 {
        width: 75%;
    }
}
@include mq(xl) {
    .col-xl-5col {
        width: 20%;
    }
    .col-xl-5col2 {
        width: 40%;
    }
    .col-xl-5col3 {
        width: 60%;
    }
    .col-xl-5col4 {
        width: 80%;
    }
}
@include mq(lg) {
    .col-lg-8col1 {
        width: 22.2%;
    }
}

.order-first {
    order: -1;
}
.order-last {
    order: 9;
}

@include mq(sm) {
    .order-sm-auto {
        order: 0;
    }
    .order-sm-first {
        order: -1;
    } 
    .order-sm-last {
        order: 9;
    }
}
@include mq(md) {
    .order-md-auto {
        order: 0;
    }
    .order-md-first {
        order: -1;
    }
    .order-md-last {
        order: 9;
    }
}
@include mq(lg) {
    .order-lg-auto {
        order: 0;
    } 
    .order-lg-first {
        order: -1;
    }
    .order-lg-last {
        order: 9;
    }
}
@include mq(xl) {
    .order-xl-auto {
        order: 0;
    } 
    .order-xl-first {
        order: -1;
    }
    .order-xl-last {
        order: 9;
    }
}
.grid {
    margin: -1rem;
    .banner,
    .category,
    .category > a,
    figure,
    .banner img,
    .category img { 
        height: 100%; 
    }
    img {
        object-fit: cover;
    }
    .grid-item {
        padding: 1rem;
        transform: translate3d(0,0,0);
    }
    &.gutter-sm {
        margin: -.5rem;
        .grid-item {
            padding: .5rem;
        }
    }
    &.gutter-no {
        margin: 0;
        .grid-item {
            padding: 0;
        }
    }
    &::after {
        content: "";
        display: block;
        clear: both;
    }
    &.grid-float {
        display: block !important;
        .grid-item {
            float: left;
        }
    }
}
.grid-layout {
    display: grid;
    margin: -1rem;
    & > * {
        padding: 1rem;
    }
}
.grid-type1 {
    grid-template-columns: repeat(auto-fill, calc(100% / 100));
    >div {
        grid-column-end: span 23;
    }
    .grid-item-1 {
        grid-column-end: span 31;
    }
    @include mq(lg, max) {
        grid-template-columns: repeat(auto-fill, calc(100% / 3));
        >div {
            grid-column-end: span 1;
        }
        .grid-item-1 {
            grid-column-end: span 3;
        }
    }
    @include mq(sm, max) {
        grid-template-columns: repeat(auto-fill, calc(100% / 2));
        .grid-item-1 {
            grid-column-end: span 2;
        }
    }
}
.grid-type2 {
    grid-template-columns: repeat(auto-fill, calc(100% / 4));
    >div {
        grid-column-end: span 1;
    }
    .grid-item-1 {
        grid-column-end: span 3;
    }
    @include mq(lg, max) {
        grid-template-columns: repeat(auto-fill, calc(100% / 3));
    }
    @include mq(sm, max) {
        grid-template-columns: repeat(auto-fill, calc(100% / 2));
        .grid-item-1 {
            grid-column-end: span 2;
        }
    }
}
.grid-type3 {
    grid-template-columns: repeat(auto-fill, calc(100% / 3));
    .grid-item-1 {
        grid-row-end: span 2;
    }
    @include mq(lg, max) {
        grid-template-columns: 50% 50%;
    }
    @include mq(sm, max) {
        grid-template-columns: 100%;
    }
}
//for product full
@include mq(lg) {
    .col-lg-6col {
        width: 35.6%;
    }
    .col-lg-5col {
        width: 32.2%;
    }
}